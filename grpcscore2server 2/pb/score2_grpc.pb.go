// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: score2.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Score2ServiceClient is the client API for Score2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Score2ServiceClient interface {
	List2Matches(ctx context.Context, in *List2MatchesRequest, opts ...grpc.CallOption) (*List2MatchesResponse, error)
}

type score2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScore2ServiceClient(cc grpc.ClientConnInterface) Score2ServiceClient {
	return &score2ServiceClient{cc}
}

func (c *score2ServiceClient) List2Matches(ctx context.Context, in *List2MatchesRequest, opts ...grpc.CallOption) (*List2MatchesResponse, error) {
	out := new(List2MatchesResponse)
	err := c.cc.Invoke(ctx, "/score2.Score2Service/List2Matches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Score2ServiceServer is the server API for Score2Service service.
// All implementations must embed UnimplementedScore2ServiceServer
// for forward compatibility
type Score2ServiceServer interface {
	List2Matches(context.Context, *List2MatchesRequest) (*List2MatchesResponse, error)
	mustEmbedUnimplementedScore2ServiceServer()
}

// UnimplementedScore2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScore2ServiceServer struct {
}

func (UnimplementedScore2ServiceServer) List2Matches(context.Context, *List2MatchesRequest) (*List2MatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List2Matches not implemented")
}
func (UnimplementedScore2ServiceServer) mustEmbedUnimplementedScore2ServiceServer() {}

// UnsafeScore2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Score2ServiceServer will
// result in compilation errors.
type UnsafeScore2ServiceServer interface {
	mustEmbedUnimplementedScore2ServiceServer()
}

func RegisterScore2ServiceServer(s grpc.ServiceRegistrar, srv Score2ServiceServer) {
	s.RegisterService(&Score2Service_ServiceDesc, srv)
}

func _Score2Service_List2Matches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List2MatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Score2ServiceServer).List2Matches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score2.Score2Service/List2Matches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Score2ServiceServer).List2Matches(ctx, req.(*List2MatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Score2Service_ServiceDesc is the grpc.ServiceDesc for Score2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Score2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score2.Score2Service",
	HandlerType: (*Score2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List2Matches",
			Handler:    _Score2Service_List2Matches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score2.proto",
}
